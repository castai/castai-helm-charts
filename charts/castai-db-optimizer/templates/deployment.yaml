apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "name" . }}
  labels:
    {{- include "labels" . | nindent 4 }}
  {{ if gt (len .Values.commonAnnotations) 0 -}}
  annotations:
    {{- include "annotations" . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      {{- include "selectorLabels" . | nindent 6 }}
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/envoy_config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      terminationGracePeriodSeconds: 60
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- $appName := default .Chart.Name .Values.nameOverride -}}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | replace "APP_NAME" $appName | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}


      volumes:
        - name: envoy-config
          configMap:
            name: {{ include "name" . }}-envoy-config
        - name: temp-storage
          emptyDir: {}
        - name: data-storage
          emptyDir:
            medium: {{ .Values.proxy.dataStorageMedium | default "" }}
      containers:
        - name: query-processor
          image: "{{.Values.queryProcessorImage.repository}}:{{default (include "defaultQueryProcessorVersion" .) .Values.queryProcessorImage.tag}}"
          imagePullPolicy: {{.Values.queryProcessorImage.pullPolicy}}
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          ports:
            - name: grpc
              containerPort: 9050
              protocol: TCP
            - name: postgres
              containerPort: 5432
              protocol: TCP
            - name: metrics
              containerPort: 2112
              protocol: TCP
          env:
            - name: CHART_VERSION
              value: {{ .Chart.Version }}
            - name: LOG_LEVEL
              value: {{ required "log level must be provided" .Values.queryProcessor.logLevel }}
            - name: API_URL
              value: {{ required "apiURL must be provided" .Values.apiURL | printf "https://%s" }}
            - name: API_KEY
              value: {{ .Values.apiKey | quote }}
            - name: PROXY_METRICS_PORT
              value: "9901"
            - name: INSTANCE_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONTAINER_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: {{ include "name" . }}
            - name: SERVER_PORT
              value: "9050"
            - name: METRICS_PORT
              value: "2112"
            - name: PEERS_URL
              value: {{ include "name" . }}
            - name: CACHE_GROUP_ID
              value: {{ .Values.cacheGroupID | required ".Values.cacheGroupID is required." | quote }}
            - name: OWN_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: QUERY_CACHE_SIZE
              value: {{ required "queryCacheSize must be provided" .Values.queryProcessor.queryCacheSize | quote}}

          readinessProbe:
            tcpSocket:
              port: 9050
            initialDelaySeconds: 0
          resources:
            requests:
              cpu: {{ .Values.resources.queryProcessor.cpu }}
            limits:
              memory: {{ .Values.resources.queryProcessor.memory }}
        - name: proxy
          image: "{{.Values.proxyImage.repository}}:{{default (include "defaultProxyVersion" .) .Values.proxyImage.tag}}"
          imagePullPolicy: {{.Values.proxyImage.pullPolicy}}
          {{- if .Values.proxy.readinessProbeEnabled }}
          readinessProbe:
            periodSeconds: 3
            exec:
              command:
              - /bin/bash
              - '-c'
              - |-
                 health=$(curl --silent localhost:9901/clusters | grep {{ .Values.apiURL }} | grep -c health_flags::healthy);
                 if [[ $health -ne 1 ]]; then echo "Initial cache configuration wasn't pulled yet" && exit 1; fi
          {{- end}}
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          command:
            - /home/polyscale/envoy
          args:
            - -c
            - /home/polyscale/envoy.yaml
            - --component-log-level
            - {{ .Values.proxy.logLevel }}
            - --file-flush-interval-msec
            - "25000"
            - --enable-core-dump
            - --concurrency
            - "{{ .Values.proxy.concurrency }}"

          resources:
            requests:
              memory: {{ .Values.resources.proxy.memoryRequest }}
              cpu: {{ .Values.resources.proxy.cpu }}
              ephemeral-storage: {{ .Values.resources.proxy.ephemeralStorage }}
            {{- if .Values.resources.proxy.memoryLimit }}
            limits:
              memory: {{ .Values.resources.proxy.memoryLimit }}
            {{- end }}
          volumeMounts:
            - name: envoy-config
              mountPath: /home/polyscale/envoy.yaml
              subPath: envoy-config.yaml
            - name: temp-storage
              mountPath: /tmp
            - name: data-storage
              mountPath: /data
